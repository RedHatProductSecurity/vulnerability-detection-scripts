#!/bin/bash

# Copyright (c) 2020  Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

VERSION="1.0"

# Warning! Be sure to download the latest version of this script from its primary source:

ARTICLE="https://access.redhat.com/security/vulnerabilities/runc-regression-docker-1.13.1-108"

# DO NOT blindly trust any internet sources and NEVER do `curl something | bash`!

# This script is meant for simple detection of the vulnerability. Feel free to modify it for your
# environment or needs. For more advanced detection, consider Red Hat Insights:
# https://access.redhat.com/products/red-hat-insights#getstarted

# Checking against the list of vulnerable packages is necessary because of the way how features
# are back-ported to older versions of packages in various channels.

VULNERABLE_VERSIONS=(
    'docker-1.13.1-108.git4ef4b30.el7'
)


basic_args() {
    # Parses basic commandline arguments and sets basic environment.
    #
    # Args:
    #     parameters - an array of commandline arguments
    #
    # Side effects:
    #     Exits if --help parameters is used
    #     Sets COLOR constants and debug variable

    local parameters=( "$@" )

    RED="\\033[1;31m"
    YELLOW="\\033[1;33m"
    GREEN="\\033[1;32m"
    BOLD="\\033[1m"
    RESET="\\033[0m"
    for parameter in "${parameters[@]}"; do
        if [[ "$parameter" == "-h" || "$parameter" == "--help" ]]; then
            echo "Usage: $( basename "$0" ) [-n | --no-colors] [-d | --debug]"
            exit 1
        elif [[ "$parameter" == "-n" || "$parameter" == "--no-colors" ]]; then
            RED=""
            # shellcheck disable=SC2034
            YELLOW=""
            GREEN=""
            BOLD=""
            RESET=""
        elif [[ "$parameter" == "-d" || "$parameter" == "--debug" ]]; then
            debug=true
        fi
    done
}


basic_reqs() {
    # Prints common disclaimer and checks basic requirements.
    #
    # Args:
    #     CVE - string printed in the disclaimer
    #
    # Side effects:
    #     Exits when 'rpm' command is not available

    local CVE="$1"

    # Disclaimer
    echo
    echo -e "${BOLD}This script (v$VERSION) is primarily designed to detect $CVE on supported"
    echo -e "Red Hat Enterprise Linux systems and kernel packages."
    echo -e "Result may be inaccurate for other RPM based systems.${RESET}"
    echo

    # RPM is required
    if ! command -v rpm &> /dev/null; then
        echo "'rpm' command is required, but not installed. Exiting."
        exit 1
    fi
}


check_supported_kernel() {
    # Checks if running kernel is supported.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #
    # Side effects:
    #     Exits when running kernel is obviously not supported

    local running_kernel="$1"

    # Check supported platform
    if [[ "$running_kernel" != *".el"[5-8]* ]]; then
        echo -e "${RED}This script is meant to be used only on RHEL 5, 6, 7 and 8.${RESET}"
        exit 1
    fi
}


get_rhel() {
    # Gets RHEL number.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #
    # Prints:
    #     RHEL number, e.g. '5', '6', '7', or '8'

    local running_kernel="$1"

    local rhel
    rhel=$( sed -r -n 's/^.*el([[:digit:]]).*$/\1/p' <<< "$running_kernel" )
    echo "$rhel"
}


check_package() {
    # Checks if installed package is in list of vulnerable packages.
    #
    # Args:
    #     installed_packages - installed packages string as returned by 'rpm -qa package'
    #                          (may be multi-line)
    #     vulnerable_versions - an array of vulnerable versions
    #
    # Prints:
    #     First vulnerable package string as returned by 'rpm -qa package', or nothing

    # Convert to array, use word splitting on purpose
    # shellcheck disable=SC2206
    local installed_packages=( $1 )
    shift
    local vulnerable_versions=( "$@" )

    for tested_package in "${vulnerable_versions[@]}"; do
        for installed_package in "${installed_packages[@]}"; do
            installed_package_without_arch="${installed_package%.*}"
            if [[ "$installed_package_without_arch" == "$tested_package" ]]; then
                echo "$installed_package"
                return 0
            fi
        done
    done
}


get_installed_packages() {
    # Checks for installed packages of a 'package_name'. Compatible with RHEL5.
    #
    # Args:
    #     package_name - package name string
    #
    # Prints:
    #     Lines with N-V-R.A strings of all installed packages.

    local package_name="$1"

    rpm -qa --queryformat="%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n" "$package_name"
}


get_selinux_mode() {
    # Checks SELinux mode.
    #
    # Returns:
    #     0 when getenforce command is available, 1 otherwise
    #
    # Prints:
    #     SELinux mode in lowercase.

    if command -v getenforce &> /dev/null 2>&1; then
        getenforce | awk '{ print tolower($0) }'
        return 0
    fi
    return 1
}


get_selinux_policy() {
    # Checks SELinux policy.
    #
    # Returns:
    #     0 when sestatus command is available, 1 otherwise
    #
    # Prints:
    #     SELinux policy in lowercase.

    local policy

    if command -v sestatus &> /dev/null 2>&1; then
        policy=$( sestatus | awk '/Loaded policy name:/ { print $4 }' )
        if [[ ! "$policy" ]]; then
            # RHEL5
            policy=$( sestatus | awk '/Policy from config file:/ { print $5 }' )
        fi
        echo "$policy"
        return 0
    fi
    return 1
}


parse_facts() {
    # Gathers all available information and stores it in global variables. Only store facts and
    # do not draw conclusion in this function for better maintainability.
    #
    # Side effects:
    #     Sets many global boolean flags and content variables

    installed_docker=$( get_installed_packages "docker" )

    selinux_mode=$( get_selinux_mode )
    selinux_policy=$( get_selinux_policy )
}

draw_conclusions() {
    # Draws conclusions based on available system data.
    #
    # Side effects:
    #     Sets many global boolean flags and content variables

    vulnerable_docker=$( check_package "$installed_docker" "${VULNERABLE_VERSIONS[@]}" )

    selinux_mitigates=0
    if [[ "$selinux_mode" == "enforcing" && "$selinux_policy" == "targeted" ]]; then
        selinux_mitigates=1
    fi

    result=0
    if [[ "$vulnerable_docker" ]]; then
        result=2
        if (( selinux_mitigates )); then
            result=1
        fi
    fi
}


debug_print() {
    # Prints selected variables when debugging is enabled.

    variables=( installed_docker
                vulnerable_docker
                selinux_mode selinux_policy selinux_mitigates result )
    for variable in "${variables[@]}"; do
        echo "$variable = *${!variable}*"
    done
    echo
}


if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    basic_args "$@"
    basic_reqs "CVE-2020-14298, CVE-2020-14300, and CVE-2016-8867"
    running_kernel=$( uname -r )
    check_supported_kernel "$running_kernel"

    rhel=$( get_rhel "$running_kernel" )
    if (( rhel == 5 )); then
        export PATH="/sbin:/usr/sbin:$PATH"
    fi

    parse_facts
    draw_conclusions

    # Debug prints
    if [[ "$debug" ]]; then
        debug_print
    fi

    # Outputs
    echo -e "Detected 'docker' package: ${BOLD}$installed_docker${RESET}"
    echo -e "SELinux mode: ${BOLD}$selinux_mode${RESET}"
    echo -e "SELinux policy: ${BOLD}$selinux_policy${RESET}"
    echo

    if (( rhel == 7 )) || [[ "$vulnerable_docker" ]]; then
        if [[ "$installed_docker" ]]; then
            if [[ "$vulnerable_docker" ]]; then
                echo -e "'docker' package is ${RED}vulnerable${RESET}"
            else
                echo -e "'docker' package is ${GREEN}NOT vulnerable${RESET}"
            fi
        fi

        if [[ ! "$vulnerable_docker" ]]; then
            echo -e "There are ${GREEN}NO vulnerable packages${RESET} installed."
        elif (( selinux_mitigates )); then
            echo -e "CVE-2020-14298 ${GREEN}is mitigated${RESET} by SELinux and cannot be exploited."
            echo -e "CVE-2020-14300 ${GREEN}is mitigated${RESET} by SELinux and cannot be exploited."
            echo -e "CVE-2016-8867 ${RED}can not be mitigated${RESET} by SELinux and the 'docker' package is ${RED}vulnerable${RESET}."
        else
            echo -e "SELinux in current state does ${RED}NOT mitigate${RESET} the vulnerability."
        fi
    else
        echo -e "This version of RHEL is ${GREEN}NOT affected${RESET}. The vulnerable package is not available for this version of RHEL."
        echo -e "There are ${GREEN}NO vulnerable packages${RESET} installed."
    fi

    echo
    echo -e "For more information about the vulnerability see:"
    echo -e "$ARTICLE"

    exit "$result"
fi
