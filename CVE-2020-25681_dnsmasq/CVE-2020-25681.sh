#!/bin/bash

# Copyright (c) 2021  Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

VERSION="1.0"

# Warning! Be sure to download the latest version of this script from its primary source:

BULLETIN="https://access.redhat.com/security/vulnerabilities/RHSB-2021-001"

# DO NOT blindly trust any internet sources and NEVER do `curl something | bash`!

# This script is meant for simple detection of the vulnerability. Feel free to modify it for your
# environment or needs. For more advanced detection, consider Red Hat Insights:
# https://access.redhat.com/products/red-hat-insights#getstarted

# Checking against the list of vulnerable packages is necessary because of the way how features
# are back-ported to older versions of packages in various channels.

VULNERABLE_VERSIONS=(
    # .ael7b
    'dnsmasq-2.66-12.ael7b'
    'dnsmasq-2.66-13.ael7b_1'
    'dnsmasq-2.66-14.ael7b_1'
    # .el6
    'dnsmasq-2.48-4.el6'
    'dnsmasq-2.48-5.el6'
    'dnsmasq-2.48-5.el6_2.2'
    'dnsmasq-2.48-6.el6'
    'dnsmasq-2.48-13.el6'
    'dnsmasq-2.48-13.el6_4.1'
    'dnsmasq-2.48-13.el6_5.1'
    'dnsmasq-2.48-14.el6'
    'dnsmasq-2.48-14.el6_6.1'
    'dnsmasq-2.48-16.el6_7.1'
    'dnsmasq-2.48-16.el6_7'
    'dnsmasq-2.48-17.el6'
    'dnsmasq-2.48-18.el6_9'
    # .el7
    'dnsmasq-2.66-10.el7'
    'dnsmasq-2.66-12.el7'
    'dnsmasq-2.66-13.el7_1'
    'dnsmasq-2.66-14.el7_1'
    'dnsmasq-2.66-14.el7_2.1'
    'dnsmasq-2.66-14.el7_2.2'
    'dnsmasq-2.66-21.el7'
    'dnsmasq-2.66-21.el7_3.2'
    'dnsmasq-2.76-2.el7'
    'dnsmasq-2.76-2.el7_4.2'
    'dnsmasq-2.76-5.el7'
    'dnsmasq-2.76-7.el7'
    'dnsmasq-2.76-7.el7_6.1'
    'dnsmasq-2.76-9.el7'
    'dnsmasq-2.76-10.el7_7.1'
    'dnsmasq-2.76-14.el7'
    'dnsmasq-2.76-15.el7'
    'dnsmasq-2.76-16.el7'
    # .el8
    'dnsmasq-2.79-4.el8'
    'dnsmasq-2.79-5.el8'
    'dnsmasq-2.79-6.el8'
    'dnsmasq-2.79-11.el8'
    'dnsmasq-2.79-11.el8_2.1'
    'dnsmasq-2.79-13.el8'
)


basic_args() {
    # Parses basic commandline arguments and sets basic environment.
    #
    # Args:
    #     parameters - an array of commandline arguments
    #
    # Side effects:
    #     Exits if --help parameters is used
    #     Sets COLOR constants and debug variable

    local parameters=( "$@" )

    RED="\\033[1;31m"
    YELLOW="\\033[1;33m"
    GREEN="\\033[1;32m"
    BOLD="\\033[1m"
    RESET="\\033[0m"
    for parameter in "${parameters[@]}"; do
        if [[ "$parameter" == "-h" || "$parameter" == "--help" ]]; then
            echo "Usage: $( basename "$0" ) [-n | --no-colors] [-d | --debug]"
            exit 1
        elif [[ "$parameter" == "-n" || "$parameter" == "--no-colors" ]]; then
            RED=""
            YELLOW=""
            GREEN=""
            BOLD=""
            RESET=""
        elif [[ "$parameter" == "-d" || "$parameter" == "--debug" ]]; then
            debug=true
        fi
    done
}


basic_reqs() {
    # Prints common disclaimer and checks basic requirements.
    #
    # Args:
    #     CVE - string printed in the disclaimer
    #
    # Side effects:
    #     Exits when 'rpm' command is not available

    local CVE="$1"

    # Disclaimer
    echo
    echo -e "${BOLD}This script (v$VERSION) is primarily designed to detect $CVE on supported"
    echo -e "Red Hat Enterprise Linux systems and kernel packages."
    echo -e "Result may be inaccurate for other RPM based systems.${RESET}"
    echo

    # RPM is required
    if ! command -v rpm &> /dev/null; then
        echo "'rpm' command is required, but not installed. Exiting."
        exit 1
    fi
}


check_supported_kernel() {
    # Checks if running kernel is supported.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #
    # Side effects:
    #     Exits when running kernel is obviously not supported

    local running_kernel="$1"

    # Check supported platform
    if [[ "$running_kernel" != *".el"[6-8]* ]]; then
        echo -e "${RED}This script is meant to be used only on RHEL 6-8.${RESET}"
        exit 1
    fi
}


compare() {
    # Compares two versions strings, such as 2.6.32-131, using comparison operators.
    #
    # Args:
    #     left - left version string to compare
    #     expression - valid comparison operator, or their combination, e.g. >, >=, =, <=, <, <>
    #     right - left version string to compare
    #
    # Returns:
    #     0 if comparison passes, 1 otherwise

    local left
    local right
    local expression="$2"

    read -r -a left <<< "$( tr ".-" "  " <<< "$1" )"
    read -r -a right <<< "$( tr ".-" "  " <<< "$3" )"

    # Find longer version string
    local nr
    if (( ${#left[@]} > ${#right[@]} )); then
        nr=${#left[@]}
    else
        nr=${#right[@]}
    fi

    # Balance shorter version string
    while (( ${#left[@]} < nr )); do
        left+=( "0" )
    done
    while (( ${#right[@]} < nr )); do
        right+=( "0" )
    done

    if [[ "$expression" == *">"* ]]; then
        for (( i = 0; i < nr; i++ )); do
            (( left[i] < right[i] )) && break
            (( left[i] > right[i] )) && return 0
        done
    fi

    if [[ "$expression" == *"<"* ]]; then
        for (( i = 0; i < nr; i++ )); do
            (( left[i] > right[i] )) && break
            (( left[i] < right[i] )) && return 0
        done
    fi

    if [[ "$expression" == *"="* ]]; then
        for (( i = 0; i < nr; i++ )); do
            (( left[i] != right[i] )) && break
            (( i == nr - 1 )) && return 0
        done
    fi

    return 1
}


check_package() {
    # Checks if installed package is in list of vulnerable packages.
    #
    # Args:
    #     installed_packages - installed packages string as returned by 'rpm -qa package'
    #                          (may be multiline)
    #     vulnerable_versions - an array of vulnerable versions
    #
    # Prints:
    #     First vulnerable package string as returned by 'rpm -qa package', or nothing

    # Convert to array, use word splitting on purpose
    # shellcheck disable=SC2206
    local installed_packages=( $1 )
    shift
    local vulnerable_versions=( "$@" )

    for tested_package in "${vulnerable_versions[@]}"; do
        for installed_package in "${installed_packages[@]}"; do
            installed_package_without_arch="${installed_package%.*}"
            if [[ "$installed_package_without_arch" == "$tested_package" ]]; then
                echo "$installed_package"
                return 0
            fi
        done
    done
}


get_installed_packages() {
    # Checks for installed packages. Compatible with RHEL5.
    #
    # Args:
    #     package_names - an array of package name strings
    #
    # Prints:
    #     Lines with N-V-R.A strings of the installed packages.

    local package_names=( "$@" )

    rpm -qa --queryformat="%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n" "${package_names[@]}"
}


get_installed_package_names() {
    # Checks for installed packages and returns the names of the installed packages. Compatible with RHEL5.
    #
    # Args:
    #     package_names - an array of package name strings
    #
    # Prints:
    #     Lines with the names of the installed packages.

    local package_names=( "$@" )

    rpm -qa --queryformat="%{NAME}\n" "${package_names[@]}" | uniq
}


get_rhel() {
    # Gets RHEL number.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #
    # Prints:
    #     RHEL number, e.g. '6', '7', or '8'

    local running_kernel="$1"

    local rhel
    rhel=$( sed -r -n 's/^.*el([[:digit:]]).*$/\1/p' <<< "$running_kernel" )
    echo "$rhel"
}


set_default_values() {
    result=0
    dnsmasq_running=0
    dnsmasq_service_running=0
    libvirtd_running=0
    nm_running=0
    dnsmasq_enabled=0
    libvirtd_enabled=0
}


parse_facts() {
    # Gathers all available information and stores it in global variables. Only store facts and
    # do not draw conclusion in this function for better maintainability.
    #
    # Side effects:
    #     Sets many global boolean flags and content variables

    result_installed_packages=$( get_installed_packages "dnsmasq" )

    running=$( ps axo args )

    if grep --quiet -E "^(/usr/sbin/)?dnsmasq" <<<"$running"; then
        dnsmasq_running=1
    fi

    if grep --quiet -E "^(/usr/sbin/)?dnsmasq((\ -k)|(\ -s\ [^\ ]+))+" <<<"$running"; then
        dnsmasq_service_running=1
    fi

    if grep --quiet -E "^(/usr/sbin/)?dnsmasq\ (.*NetworkManager){2,6}" <<<"$running"; then
        nm_running=1
    fi

    if grep --quiet -E "^(/usr/sbin/)?dnsmasq\ (.*libvirt){1,6}" <<<"$running"; then
        libvirtd_running=1
    fi
    if (( rhel > 6 )); then
        if systemctl -q is-enabled dnsmasq; then
            dnsmasq_enabled=1
        fi

        if systemctl -q is-enabled libvirtd; then
            libvirtd_enabled=1
        fi
    else
        if chkconfig --list dnsmasq | grep -q :on; then
            dnsmasq_enabled=1
        fi

        if chkconfig --list libvirtd | grep -q :on; then
            libvirtd_enabled=1
        fi
    fi
}


draw_conclusions() {
    # Draws conclusions based on available system data.
    #
    # Side effects:
    #     Sets many global boolean flags and content variables
    #

    vulnerable_package=$( check_package "$result_installed_packages" "${VULNERABLE_VERSIONS[@]}" )

    if [[ "$vulnerable_package" ]]; then
        result=1
        if (( dnsmasq_running )); then
           (( result |= 2 ))
        fi

        if (( dnsmasq_service_running )); then
           (( result |= 4 ))
        fi
        
        if (( dnsmasq_enabled )); then
           (( result |= 8 ))
        fi

        if (( libvirtd_running )); then
           (( result |= 16 ))
        fi

        if (( libvirtd_enabled )); then
           (( result |= 32 ))
        fi

        if (( nm_running )); then
           (( result |= 64 ))
        fi
    fi
}


debug_print() {
    # Prints selected variables when debugging is enabled.

    variables=( running_kernel rhel dnsmasq_running dnsmasq_service_running dnsmasq_enabled libvirtd_running
        libvirtd_enabled result vulnerable_package result_installed_packages nm_running )
    for variable in "${variables[@]}"; do
        echo "$variable = *${!variable}*"
    done
    echo
}


if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    basic_args "$@"
    basic_reqs "CVE-2020-25681,\nCVE-2020-25682, CVE-2020-25683, CVE-2020-25684, CVE-2020-25685,\nCVE-2020-25686, and CVE-2020-25687"
    running_kernel=$( uname -r )
    check_supported_kernel "$running_kernel"
    rhel=$( get_rhel "$running_kernel" )

    set_default_values
    parse_facts
    draw_conclusions

    # Debug prints
    if [[ "$debug" ]]; then
        debug_print
    fi

    # Results
    if [[ "$result_installed_packages" ]]; then
        echo -e "Detected 'dnsmasq' package: ${BOLD}$result_installed_packages${RESET}"
        if (( result >= 1 )); then
            echo -e "${RED}This version of dnsmasq is vulnerable.${RESET}"
            echo 
            echo "Additional information:"
            if (( dnsmasq_running && ! ( dnsmasq_service_running || libvirtd_running || nm_running ) )); then
                echo -e "* ${RED}A dnsmasq process is currently running.${RESET}"
            fi
            if (( dnsmasq_service_running )); then
                echo -e "* ${RED}The dnsmasq service is currently running.${RESET}"
            fi
            if (( libvirtd_running )); then
                echo -e "* ${YELLOW}Libvirt is using dnsmasq.${RESET}"
            fi
            if (( nm_running )); then
                echo -e "* ${YELLOW}NetworkManager is using dnsmasq.${RESET}"
            fi
            if (( dnsmasq_enabled )); then
                echo -e "* ${YELLOW}The dnsmasq service is enabled.${RESET}"
            fi
            if (( libvirtd_enabled )); then
                echo -e "* ${YELLOW}The libvirtd service is enabled.${RESET}"
            fi
            if (( !dnsmasq_running && ( dnsmasq_enabled || libvirtd_enabled ) )); then
                echo -e "* ${YELLOW}Though no dnsmasq process is currently running, rebooting the system with a service enabled may increase the risk of this vulnerability being exploited.${RESET}"
            fi
            echo
            echo -e "See $BULLETIN for more information."
        else
            echo -e "${GREEN}This version of dnsmasq is not vulnerable.${RESET}"
        fi
    else
        echo -e "${GREEN}Dnsmasq is not installed.${RESET}"
    fi

    exit "$result"
fi
