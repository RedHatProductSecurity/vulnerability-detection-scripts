#!/usr/bin/env bats

export RHEL7="3.10.0-520.10.2.el7.x86_64"
export FEDORA="4.9.14-200.fc25.x86_64"
export SCRIPT_NAME=$( grep -E '^\. .*\.sh$' test_harness | sed -r 's/^\. (.*)$/\1/g' )

setup_file() {
    bash ./fake_jars_unpack.sh
    uname() {
        echo "$RHEL7"
    }
    export -f uname
    export CANONPWD="$( readlink -f "$( pwd )" )"
}

teardown_file() {
    bash ./fake_jars_delete.sh
    :
}


@test "Integration -- TMPPATH inside SCANPATH" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp/tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/test_integration_tmp --tmp "$CANONPWD"/test_integration_tmp/tmp
    (( status == 1 ))
    [[ "$output" == *"TMPPATH must not be a subdirectory of SCANPATH. Exiting."* ]]
    rm -rf test_integration_tmp
}

@test "Integration -- fake_jars_nonvuln" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jars_nonvuln --tmp "$CANONPWD"/test_integration_tmp
    (( status == 0 ))
    [[ "$output" == *"The specified directory does not contain vulnerable log4j-core jar files."* ]]
    rm -rf test_integration_tmp
}

@test "Integration -- fake_jar_test_battery_smoke_1" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jar_test_battery_smoke_1 --tmp "$CANONPWD"/test_integration_tmp
    (( status == 2 ))
    [[ "$output" == *"The specified directory contains vulnerable log4j-core jar files."* ]]
    [[ "$output" == *"* 1 files were identified."* ]]
    sed -i 's/.*fake_jar_test_battery_smoke_1//g' test_integration_tmp/report/vuln_log4j2_path_*txt  # strip the beginning of the path so that the test runs everywhere
    ## sha256sum test_integration_tmp/report/vuln_log4j2_path_* > results_fake_jar_test_battery_smoke_1.sha
    run sha256sum -c --quiet results_fake_jar_test_battery_smoke_1.sha
    (( status == 0 ))
    rm -rf test_integration_tmp
}



@test "Integration -- fake_jar_test_battery_smoke_2" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jar_test_battery_smoke_2 --tmp "$CANONPWD"/test_integration_tmp
    (( status == 0 ))
    [[ "$output" == *"The specified directory does not contain vulnerable log4j-core jar files."* ]]
    rm -rf test_integration_tmp
}



@test "Integration -- fake_jar_test_battery_smoke_3" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jar_test_battery_smoke_3 --tmp "$CANONPWD"/test_integration_tmp
    (( status == 2 ))
    [[ "$output" == *"The specified directory contains vulnerable log4j-core jar files."* ]]
    [[ "$output" == *"* 1 files were identified."* ]]
    sed -i 's/.*fake_jar_test_battery_smoke_3//g' test_integration_tmp/report/vuln_log4j2_path_*txt  # strip the beginning of the path so that the test runs everywhere
    ## sha256sum test_integration_tmp/report/vuln_log4j2_path_* > results_fake_jar_test_battery_smoke_3.sha
    run sha256sum -c --quiet results_fake_jar_test_battery_smoke_3.sha
    (( status == 0 ))
    rm -rf test_integration_tmp
}


@test "Integration -- fake_jar_test_battery_smoke_4" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jar_test_battery_smoke_4 --tmp "$CANONPWD"/test_integration_tmp
    (( status == 2 ))
    [[ "$output" == *"The specified directory contains vulnerable log4j-core jar files."* ]]
    [[ "$output" == *"* 3 files were identified."* ]]
    sed -i 's/.*fake_jar_test_battery_smoke_4//g' test_integration_tmp/report/vuln_log4j2_path_*txt  # strip the beginning of the path so that the test runs everywhere
    ## sha256sum test_integration_tmp/report/vuln_log4j2_path_* > results_fake_jar_test_battery_smoke_4.sha
    run sha256sum -c --quiet results_fake_jar_test_battery_smoke_4.sha
    (( status == 0 ))
    rm -rf test_integration_tmp
}


@test "Integration -- fake_jar_test_battery_smoke_5" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jar_test_battery_smoke_5 --tmp "$CANONPWD"/test_integration_tmp
    (( status == 2 ))
    [[ "$output" == *"The specified directory contains vulnerable log4j-core jar files."* ]]
    [[ "$output" == *"* 4 files were identified."* ]]
    sed -i 's/.*fake_jar_test_battery_smoke_5//g' test_integration_tmp/report/vuln_log4j2_path_*txt  # strip the beginning of the path so that the test runs everywhere
    ## sha256sum test_integration_tmp/report/vuln_log4j2_path_* > results_fake_jar_test_battery_smoke_5.sha
    run sha256sum -c --quiet results_fake_jar_test_battery_smoke_5.sha
    (( status == 0 ))
    rm -rf test_integration_tmp
}


@test "Integration -- fake_jars_vuln" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jars_vuln --tmp "$CANONPWD"/test_integration_tmp
    (( status == 2 ))
    [[ "$output" == *"The specified directory contains vulnerable log4j-core jar files."* ]]
    sed -i 's/.*fake_jars_vuln//g' test_integration_tmp/report/vuln_log4j2_path_*txt  # strip the beginning of the path so that the test runs everywhere
    ## sha256sum test_integration_tmp/report/vuln_log4j2_path_* > results_fake_jars_vuln.sha
    run sha256sum -c --quiet results_fake_jars_vuln.sha
    (( status == 0 ))
    rm -rf test_integration_tmp
}




@test "Integration -- fake_jar_test_battery_1" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jar_test_battery_1 --tmp "$CANONPWD"/test_integration_tmp
    (( status == 2 ))
    [[ "$output" == *"The specified directory contains vulnerable log4j-core jar files."* ]]
    [[ "$output" == *"* 61 files were identified."* ]]
    sed -i 's/.*fake_jar_test_battery_1//g' test_integration_tmp/report/vuln_log4j2_path_*txt  # strip the beginning of the path so that the test runs everywhere
    ## sha256sum test_integration_tmp/report/vuln_log4j2_path_* > results_fake_jar_test_battery_1.sha
    run sha256sum -c --quiet results_fake_jar_test_battery_1.sha
    (( status == 0 ))
    rm -rf test_integration_tmp
}



@test "Integration -- fake_jar_test_battery_2" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jar_test_battery_2 --tmp "$CANONPWD"/test_integration_tmp
    (( status == 0 ))
    [[ "$output" == *"The specified directory does not contain vulnerable log4j-core jar files."* ]]
    rm -rf test_integration_tmp
}



@test "Integration -- fake_jar_test_battery_3" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jar_test_battery_3 --tmp "$CANONPWD"/test_integration_tmp
    (( status == 2 ))
    [[ "$output" == *"The specified directory contains vulnerable log4j-core jar files."* ]]
    [[ "$output" == *"* 61 files were identified."* ]]
    sed -i 's/.*fake_jar_test_battery_3//g' test_integration_tmp/report/vuln_log4j2_path_*txt  # strip the beginning of the path so that the test runs everywhere
    ## sha256sum test_integration_tmp/report/vuln_log4j2_path_* > results_fake_jar_test_battery_3.sha
    run sha256sum -c --quiet results_fake_jar_test_battery_3.sha
    (( status == 0 ))
    rm -rf test_integration_tmp
}


@test "Integration -- fake_jar_test_battery_4" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jar_test_battery_4 --tmp "$CANONPWD"/test_integration_tmp
    (( status == 2 ))
    [[ "$output" == *"The specified directory contains vulnerable log4j-core jar files."* ]]
    [[ "$output" == *"* 183 files were identified."* ]]
    sed -i 's/.*fake_jar_test_battery_4//g' test_integration_tmp/report/vuln_log4j2_path_*txt  # strip the beginning of the path so that the test runs everywhere
    ## sha256sum test_integration_tmp/report/vuln_log4j2_path_* > results_fake_jar_test_battery_4.sha
    run sha256sum -c --quiet results_fake_jar_test_battery_4.sha
    (( status == 0 ))
    rm -rf test_integration_tmp
}


@test "Integration -- symlinks 1" {
    # For CI envs that don't have it.
    unzip() {
        return 0
    }
    export -f unzip

    rm -rf test_integration_tmp
    rm -f symlinked_source

    mkdir -p test_integration_tmp

    # sanity check
    command -v readlink

    # work around variable exported in setup_file being unset in some bats versions
    echo "CANONPWD is $CANONPWD"
    export CANONPWD="$( readlink -f "$( pwd )" )"
    echo "CANONPWD is $CANONPWD"

    ln -s "$CANONPWD"/fake_jar_test_battery_smoke_4 symlinked_source

    echo "symlinked_source resolves to $( readlink -f symlinked_source )"
    echo "running script like this: ${SCRIPT_NAME} -n --scan $CANONPWD/symlinked_source --tmp $CANONPWD/test_integration_tmp"

    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/symlinked_source --tmp "$CANONPWD"/test_integration_tmp
    echo "xxxxxxxxxx OUTPUT xxxxxxxxxx"
    echo "$output"
    echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    (( status == 1 ))
    rm -rf test_integration_tmp
    rm -f symlinked_source
}

@test "Integration -- symlinks 2" {
    # For CI envs that don't have it.
    unzip() {
        return 0
    }
    export -f unzip

    # For CI envs that don't have it.
    file() {
        return 0
    }
    export -f file

    rm -rf test_integration_tmp
    rm -rf symlinked_source_2

    mkdir -p test_integration_tmp
    mkdir -p symlinked_source_2

    # sanity check
    command -v readlink

    # work around variable exported in setup_file being unset in some bats versions
    echo "CANONPWD is $CANONPWD"
    export CANONPWD="$( readlink -f "$( pwd )" )"
    echo "CANONPWD is $CANONPWD"

    ln -s "$CANONPWD"/fake_jar_test_battery_smoke_4 symlinked_source_2/x

    echo "symlinked_source_2 resolves to $( readlink -f symlinked_source_2 )"
    echo "running script like this: ${SCRIPT_NAME} -n --scan $CANONPWD/symlinked_source_2 --tmp $CANONPWD/test_integration_tmp"

    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/symlinked_source_2 --tmp "$CANONPWD"/test_integration_tmp
    echo "xxxxxxxxxx OUTPUT xxxxxxxxxx"
    echo "$output"
    echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    (( status == 0 ))
    # because symlinks are ignored
    [[ "$output" == *"The specified directory does not contain vulnerable log4j-core jar files."* ]]
    rm -rf test_integration_tmp
    rm -rf symlinked_source_2
}

@test "Integration -- symlinks 3" {
    # For CI envs that don't have it.
    unzip() {
        return 0
    }
    export -f unzip

    rm -rf test_integration_tmp
    rm -rf symlinked_source_2

    mkdir -p test_integration_tmp
    mkdir -p symlinked_source_2

    # sanity check
    command -v readlink

    echo "CANONPWD is $CANONPWD"
    export CANONPWD="$( readlink -f "$( pwd )" )"
    echo "CANONPWD is $CANONPWD"

    ln -s "$CANONPWD"/fake_jar_test_battery_smoke_4 symlinked_source_2/x

    echo "symlinked_source_2 resolves to $( readlink -f symlinked_source_2 )"
    echo "symlinked_source_2/x resolves to $( readlink -f symlinked_source_2/x )"
    echo "CANONPWD/fake_jar_test_battery_smoke_4 resolves to $( readlink -f "$CANONPWD/fake_jar_test_battery_smoke_4" )"


    # sanity checks
    [[ -L symlinked_source_2/x ]]
    [[ "$( readlink -f "$CANONPWD/symlinked_source_2/x" )" == "$CANONPWD/fake_jar_test_battery_smoke_4" ]]

    echo "running script like this: ${SCRIPT_NAME} -n --scan $CANONPWD/symlinked_source_2/x --tmp $CANONPWD/test_integration_tmp"

    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/symlinked_source_2/x --tmp "$CANONPWD"/test_integration_tmp
    echo "xxxxxxxxxx OUTPUT xxxxxxxxxx"
    echo "$output"
    echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    (( status == 1 ))
    rm -rf test_integration_tmp
    rm -rf symlinked_source
}


@test "Integration -- symlinks 4" {
    # For CI envs that don't have it.
    unzip() {
        return 0
    }
    export -f unzip

    rm -rf test_integration_tmp
    rm -f symlinked_tmp

    mkdir -p test_integration_tmp

    ln -s test_integration_tmp symlinked_tmp

    export CANONPWD="$( readlink -f "$( pwd )" )"
    echo "CANONPWD is $CANONPWD"

    # sanity check
    command -v readlink

    echo "symlinked_tmp resolves to $( readlink -f symlinked_tmp )"

    echo "running script like this: ${SCRIPT_NAME} -n --scan $CANONPWD/fake_jar_test_battery_smoke_4 --tmp $CANONPWD/symlinked_tmp"

    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/fake_jar_test_battery_smoke_4 --tmp "$CANONPWD"/symlinked_tmp
    echo "xxxxxxxxxx OUTPUT xxxxxxxxxx"
    echo "$output"
    echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    (( status == 1 ))
    rm -rf test_integration_tmp
    rm -f symlinked_tmp
}


@test "Integration -- filenames with dash" {
    if ! command -v unzip &> /dev/null; then
        return 0
        # This testing environment can't run the script. Lacks unzip.
    fi

    rm -rf test_integration_tmp
    mkdir -p test_integration_tmp
    rm -rf dashes
    mkdir dashes
    cp -R fake_jar_test_battery_smoke_4 dashes/-X
    cp -R fake_jar_test_battery_smoke_4 dashes/-i
    cp fake_jar_test_battery_smoke_4/log4j-core-2.0.zip dashes/-E
    run ./"${SCRIPT_NAME}" -n --scan "$CANONPWD"/dashes --tmp "$CANONPWD"/test_integration_tmp
    (( status == 2 ))
    [[ "$output" == *"The specified directory contains vulnerable log4j-core jar files."* ]]
    [[ "$output" == *"* 7 files were identified."* ]]
    sed -i 's/.*dashes//g' test_integration_tmp/report/vuln_log4j2_path_*txt  # strip the beginning of the path so that the test runs everywhere
    ## sha256sum test_integration_tmp/report/vuln_log4j2_path_* > results_dashes.sha
    run sha256sum -c --quiet results_dashes.sha
    (( status == 0 ))
    rm -rf test_integration_tmp
    rm -rf dashes
}
