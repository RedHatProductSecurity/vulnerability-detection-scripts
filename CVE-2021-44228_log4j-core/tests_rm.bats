#!/usr/bin/env bats


@test "rm -- #1" {
    # This test shows the following:
    #  * That the rm commands in the script are limited to the lines in approved_rm_lines.txt
    #    (comments are ignored)
    #  * A change in or an addition of an rm command must be reflected in tests_rm.bats and
    #    probably approved_rm_lines.txt, making such a change visibly noticeable and easily
    #    searchable in git history.
    #  * The amount of rm commands is very limited and this test might make it somewhat easier to
    #    audit the rm commands.
    # This test doesn't prove the following:
    #  * There are no obfuscated ways to execute rm (a manual review of the entire script is
    #    necessary to conclude that).
    #  * All usages of rm are safe, in the right moments, in the right environment (a manual
    #    review of the entire script is necessary to conclude that).

    # make sure the list of approved rm lines wasn't changed by accident
    [[ "$( sha256sum approved_rm_lines.txt )" == "66a8e12fc180bba08630e6fe72d2f954cc8ac4490489aec7f002e3b11315e758  approved_rm_lines.txt" ]]

    # make sure there are no empty lines in approved_rm_lines.txt
    ! grep -q -Fx '' approved_rm_lines.txt

    # make sure there are no unapproved lines containing 'rm ' (ignoring #comments)
    ! grep -F 'rm ' CVE-2021-44228.sh | grep -v -E '^ *#.*$' | sed -r 's/^ *//g' | grep -vFxf approved_rm_lines.txt 

    # Show that there are no string like these: (ignoring #comments)
    # rm"
    # rm;
    # rm)
    # rm}
    # rm'
    ! grep -E '^[^#]*rm[";)}]' CVE-2021-44228.sh 
    ! grep -E "^[^#]*rm'" CVE-2021-44228.sh 

}


@test "rm -- #2" {
    # This test shows the following:
    #  * That the rm commands in the script are limited to the blocks in approved_rm_blocks.txt
    #    (comments are ignored)
    #  * A change in or an addition of an rm command must be reflected in tests_rm.bats and
    #    probably approved_rm_blocks.txt, making such a change visibly noticeable and easily
    #    searchable in git history.
    #  * The amount of rm commands is very limited and this test might make it somewhat easier to
    #    audit the rm commands.
    #  * A limited context of the rm commands is visible, making it easy to audit that appropriate
    #    checks are executed before executing an rm command.
    # This test doesn't prove the following:
    #  * There are no obfuscated ways to execute rm (a manual review of the entire script is
    #    necessary to conclude that).
    #  * All usages of rm are safe, in the right moments, in the right environment (a manual
    #    review of the entire script is necessary to conclude that).

    # make sure the listing of approved rm blocks wasn't changed by accident
    [[ "$( sha256sum approved_rm_blocks.txt )" == "98d2c4d92078cb73b83a69c17abf03c3bc748ceedafcdb446816c728864758ef  approved_rm_blocks.txt" ]]

    # make sure there's a line that checks $dir_to_delete for the most grave problems
    # (in the whole script, $dir_to_delete is the only mutable variable passed to an rm command)
    [[ "$( cat approved_rm_blocks.txt )" == *'if [[ "$dir_to_delete" != *..* && "$dir_to_delete" != */* ]] ; then'* ]]
    
    # check that the blocks with the rm commands as reported by grep are identical to approved_rm_blocks.txt
    [[ "$( grep -A3 -B5 -E '^[^#]*rm ' CVE-2021-44228.sh | grep -v -E '^ *#.*$' )" == "$( cat approved_rm_blocks.txt )" ]]


}


@test "rm -- #3" {
    # This test shows the following:
    #  * The listed variables are used like these in the script. (It can be assumed that it
    #    means that they can't be modified once these lines are executed.)
    # This test doesn't prove the following:
    #  * That these lines are ever run (a manual review of the entire script is
    #    necessary to conclude that).
    #  * That these lines are never modified (a manual review of the entire script is
    #    necessary to conclude that).
    #  * These lines are run at the right moment (a manual
    #    review of the entire script is necessary to conclude that).

    grep -q -Fx '    readonly queue="CVE_2021_44228_queue"' CVE-2021-44228.sh
    grep -q -Fx '    readonly catalog="CVE_2021_44228_catalog"' CVE-2021-44228.sh
    grep -q -Fx '    readonly decompressed="CVE_2021_44228_decompressed"' CVE-2021-44228.sh
    grep -q -Fx '    readonly parents="CVE_2021_44228_parents"' CVE-2021-44228.sh
    grep -q -Fx '    readonly backtrack="CVE_2021_44228_backtrack"' CVE-2021-44228.sh
    grep -q -Fx '    readonly detections="CVE_2021_44228_detections"' CVE-2021-44228.sh
    grep -q -Fx '    readonly report="report"' CVE-2021-44228.sh

    grep -q -Fx '    readonly tmp_path' CVE-2021-44228.sh
    grep -q -Fx '    readonly scan_path' CVE-2021-44228.sh
    grep -q -Fx '    readonly audit_tmp_path' CVE-2021-44228.sh
    grep -q -Fx '    readonly audit_scan_path' CVE-2021-44228.sh
}

