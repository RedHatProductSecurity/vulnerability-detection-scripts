#!/bin/bash

# Copyright (c) 2019  Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Version: 1.0

# Warning! Be sure to download latest version of this script from its primary source:
# https://access.redhat.com/security/vulnerabilities/kracks
# DO NOT blindly trust any internet sources and NEVER do `curl something | bash`!

# Checking against the list of vulnerable packages is necessary because of the way how features
# are back-ported to older versions of packages in various channels.


VULNERABLE_VERSIONS=(
    'wpa_supplicant-2.0-17.ael7b_1'
    'wpa_supplicant-0.4.8-10.2.el5'
    'wpa_supplicant-0.5.10-8.el5'
    'wpa_supplicant-0.5.10-9.el5'
    'wpa_supplicant-0.5.10-10.el5'
    'wpa_supplicant-0.7.3-2.el6'
    'wpa_supplicant-0.7.3-3.el6'
    'wpa_supplicant-0.7.3-4.el6'
    'wpa_supplicant-0.7.3-4.el6_3'
    'wpa_supplicant-0.7.3-6.el6'
    'wpa_supplicant-0.7.3-8.el6'
    'wpa_supplicant-0.7.3-8.el6_8.1'
    'wpa_supplicant-0.7.3-9.el6'
    'wpa_supplicant-2.0-12.el7'
    'wpa_supplicant-2.0-13.el7'
    'wpa_supplicant-2.0-13.el7_0'
    'wpa_supplicant-2.0-17.el7_1'
    'wpa_supplicant-2.0-20.el7'
    'wpa_supplicant-2.0-21.el7_3'
    'wpa_supplicant-2.6-5.el7'
    'wpa_supplicant-0.6.8-10.el6'
    'wpa_supplicant-2.0-6.el7'
    'wpa_supplicant-2.0-14.aa7a'
    'wpa_supplicant-2.0-14.ael7b'
    'wpa_supplicant-2.0-17.el7'
)


basic_args() {
    # Parses basic commandline arguments and sets basic environment.
    #
    # Args:
    #     parameters - an array of commandline arguments
    #
    # Side effects:
    #     Exits if --help parameters is used
    #     Sets COLOR constants and debug variable

    local parameters=( "$@" )

    RED="\033[1;31m"
    YELLOW="\033[1;33m"
    GREEN="\033[1;32m"
    BOLD="\033[1m"
    RESET="\033[0m"
    for parameter in "${parameters[@]}"; do
        if [[ "$parameter" == "-h" || "$parameter" == "--help" ]]; then
            echo "Usage: $( basename "$0" ) [-n | --no-colors] [-d | --debug]"
            exit 1
        elif [[ "$parameter" == "-n" || "$parameter" == "--no-colors" ]]; then
            RED=""
            YELLOW=""
            GREEN=""
            BOLD=""
            RESET=""
        elif [[ "$parameter" == "-d" || "$parameter" == "--debug" ]]; then
            debug=true
        fi
    done
}


basic_reqs() {
    # Prints common disclaimer and checks basic requirements.
    #
    # Args:
    #     CVE - string printed in the disclaimer
    #
    # Side effects:
    #     Exits when 'rpm' command is not available

    local CVE="$1"

    # Disclaimer
    echo
    echo -e "${BOLD}This script is primarily designed to detect $CVE on supported"
    echo -e "Red Hat Enterprise Linux systems and kernel packages."
    echo -e "Result may be inaccurate for other RPM based systems.${RESET}"
    echo

    # RPM is required
    if ! command -v rpm &> /dev/null; then
        echo "'rpm' command is required, but not installed. Exiting."
        exit 1
    fi
}


check_supported_kernel() {
    # Checks if running kernel is supported.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #
    # Side effects:
    #     Exits when running kernel is obviously not supported

    local running_kernel="$1"

    # Check supported platform
    if [[ "$running_kernel" != *".el"[5-7]* ]]; then
        echo -e "${RED}This script is meant to be used only on Red Hat Enterprise"
        echo -e "Linux 5, 6 and 7.${RESET}"
        exit 1
    fi
}


get_rhel() {
    # Gets RHEL number.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #
    # Prints:
    #     RHEL number, e.g. '5', '6', or '7'

    local running_kernel="$1"
    local rhel

    rhel=$( sed -r -n 's/^.*el([[:digit:]]).*$/\1/p' <<< "$running_kernel" )
    echo "$rhel"
}


check_package() {
    # Checks if installed package is in list of vulnerable packages.
    #
    # Args:
    #     installed_packages - installed packages string as returned by 'rpm -qa package'
    #                          (may be multiline)
    #     vulnerable_versions - an array of vulnerable versions
    #
    # Prints:
    #     First vulnerable package string as returned by 'rpm -qa package', or nothing

    # Convert to array, use word splitting on purpose
    # shellcheck disable=SC2206
    local installed_packages=( $1 )
    shift
    local vulnerable_versions=( "$@" )

    for tested_package in "${vulnerable_versions[@]}"; do
        for installed_package in "${installed_packages[@]}"; do
            installed_package_without_arch="${installed_package%.*}"
            if [[ "$installed_package_without_arch" == "$tested_package" ]]; then
                echo "$installed_package"
                return 0
            fi
        done
    done
}


get_installed_packages() {
    # Checks for installed packages of a 'package_name'. Compatible with RHEL5.
    #
    # Args:
    #     package_name - package name string
    #
    # Prints:
    #     Lines with N-V-R.A strings of all installed packages.

    local package_name="$1"

    rpm -qa --queryformat="%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n" "$package_name"
}


check_wifi_interfaces() {
    # Checks if WiFi interfaces are present. This works on RHEL5, RHEL6, and RHEL7.
    #
    # Prints:
    #     List of WiFi interfaces
    #
    # Note:
    #     MOCK_SYS_CLASS_NET_PATH can be used to mock /sys/class/net directory

    local sys_class_net_path=${MOCK_SYS_CLASS_NET_PATH:-/sys/class/net}

    find "$sys_class_net_path" \( -name 'wlan*' -o -name 'wlp*' \) -printf "%f\n"
}


check_wifi_interfaces_active() {
    # Checks if active WiFi interfaces are present. This works on RHEL5, RHEL6, and RHEL7.
    #
    # Prints:
    #     List of active WiFi interfaces
    #
    # Note:
    #     MOCK_SYS_CLASS_NET_PATH can be used to mock /sys/class/net directory

    local sys_class_net_path=${MOCK_SYS_CLASS_NET_PATH:-/sys/class/net}
    local interfaces

    # shellcheck disable=SC2207
    interfaces=( $( check_wifi_interfaces ) ) # use word-splitting for multi-line
    for interface in "${interfaces[@]}"; do
        if grep --quiet up "$sys_class_net_path/$interface/operstate"; then
            echo "$interface"
        fi
    done
}


if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    basic_args "$@"
    basic_reqs "CVE-2017-13077"
    running_kernel=$( uname -r )
    check_supported_kernel "$running_kernel"

    rhel=$( get_rhel "$running_kernel" )
    if [[ "$rhel" == "5" ]]; then
        export PATH='/sbin':$PATH
    fi

    installed_packages_list=$( get_installed_packages "wpa_supplicant" )
    if [[ ! "$installed_packages_list" ]]; then
        echo -e "${GREEN}'wpa_supplicant' is not installed.${RESET}"
        exit 0
    fi

    # Basic checks
    vulnerable_package=$( check_package "$installed_packages_list" "${VULNERABLE_VERSIONS[@]}" )

    # Specific checks
    # Use word-splitting for multi-line value
    # shellcheck disable=SC2207
    wifi_interfaces=( $( check_wifi_interfaces ) )
    # Use word-splitting for multi-line value
    # shellcheck disable=SC2207
    wifi_interfaces_active=( $( check_wifi_interfaces_active ) )

    # Debug prints
    if [[ "$debug" ]]; then
        echo "installed_packages_list = *$installed_packages_list*"
        echo "vulnerable_package = *$vulnerable_package*"
        echo "running_kernel = *$running_kernel*"
        echo "rhel = *$rhel*"
        echo "wifi_interfaces = *${wifi_interfaces[*]}*"
        echo "wifi_interfaces_active = *${wifi_interfaces_active[*]}*"
        echo
    fi

    # Results
    echo -e "Detected 'wpa_supplicant' packages are:${BOLD}"
    echo -e "$installed_packages_list${RESET}"

    if [[ "$vulnerable_package" ]]; then
        if [[ "${wifi_interfaces[*]}" ]]; then
            if [[ "${wifi_interfaces_active[*]}" ]]; then
                echo -e "${RED}This wpa_supplicant version is vulnerable.${RESET}"
                echo -e "${RED}There are active WiFi interfaces:${RESET} ${wifi_interfaces_active[*]}"
                exit 3
            else
                echo -e "${RED}This wpa_supplicant version is vulnerable.${RESET}"
                echo -e "${YELLOW}There are inactive WiFi interfaces available:${RESET} ${wifi_interfaces[*]}"
                exit 2
            fi
        else
            echo -e "${YELLOW}This wpa_supplicant version is vulnerable.${RESET}"
            echo -e "${GREEN}No WiFi interfaces were detected${RESET} so vulnerability is not exploitable."
            exit 0
        fi
    else
        echo -e "${GREEN}This wpa_supplicant version is not vulnerable.${RESET}"
        exit 0
    fi
fi
