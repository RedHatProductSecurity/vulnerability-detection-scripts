#!/bin/bash

# Copyright (c) 2019  Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Version: 1.1

# Warning! Be sure to download latest version of this script from its primary source:
# https://access.redhat.com/security/vulnerabilities/smbloris
# DO NOT blindly trust any internet sources and NEVER do `curl something | bash`!


basic_args() {
    # Parses basic commandline arguments and sets basic environment.
    #
    # Args:
    #     parameters - an array of commandline arguments
    #
    # Side effects:
    #     Exits if --help parameters is used
    #     Sets COLOR constants and debug variable

    parameters=( "$@" )

    RED="\033[1;31m"
    YELLOW="\033[1;33m"
    GREEN="\033[1;32m"
    BOLD="\033[1m"
    RESET="\033[0m"
    for parameter in "${parameters[@]}"; do
        if [[ "$parameter" == "-h" || "$parameter" == "--help" ]]; then
            echo "Usage: $( basename "$0" ) [-n | --no-colors] [-d | --debug]"
            exit 1
        elif [[ "$parameter" == "-n" || "$parameter" == "--no-colors" ]]; then
            RED=""
            YELLOW=""
            GREEN=""
            BOLD=""
            RESET=""
        elif [[ "$parameter" == "-d" || "$parameter" == "--debug" ]]; then
            debug=true
        fi
    done
}


basic_reqs() {
    # Prints common disclaimer and checks basic requirements.
    #
    # Args:
    #     CVE - string printed in the disclaimer
    #
    # Side effects:
    #     Exits when 'rpm' command is not available

    CVE="$1"

    # Disclaimer
    echo
    echo -e "${BOLD}This script is primarily designed to detect $CVE on supported"
    echo -e "Red Hat Enterprise Linux systems and kernel packages."
    echo -e "Result may be inaccurate for other RPM based systems.${RESET}"
    echo

    # RPM is required
    if ! command -v rpm &> /dev/null; then
        echo "'rpm' command is required, but not installed. Exiting."
        exit 1
    fi
}


mitigation_check() {
    # Checks if 'max smbd processes' is contained in '/etc/samba/smb.conf'.
    #
    # Section and parameter names are not case sensitive.
    # Case is not significant in boolean values, but is preserved in string values.
    #
    # Returns:
    #     0 if mitigation is applied, otherwise different exit code
    #
    # Notes:
    #     MOCK_SMB_CONF can be used to mock /etc/samba/smb.conf file

    smb_conf_path=${MOCK_SMB_CONF:-/etc/samba/smb.conf}

    # Non-zero value is deemed as mitigation.
    grep -E --ignore-case --quiet '^[[:space:]]*max smbd processes[[:space:]]*=[[:space:]]*[0-9]*[1-9]+[0-9]*[[:space:]]*$' "$smb_conf_path"
}


if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    basic_args "$@"
    basic_reqs "SMBLoris" # no CVE yet

    # Get installed samba package
    installed_samba=$( rpm -qa samba )
    if [[ ! "$installed_samba" ]]; then
        installed_samba=$( rpm -qa samba3x )
    fi
    if [[ ! "$installed_samba" ]]; then
        installed_samba=$( rpm -qa samba4 )
    fi
    if [[ ! "$installed_samba" ]]; then
        echo -e "${GREEN}Samba is not installed${RESET}."
        exit 0
    fi

    # Mitigation checks
    mitigation_check
    # Store result as a flag, 1 as True, 0 as False
    # shellcheck disable=SC2181
    mitigation_applied=$(( !$? ))

    # Debug prints
    if [[ "$debug" ]]; then
        echo "installed_samba = *$installed_samba*"
        echo "mitigation_applied = *$mitigation_applied* (1 is True)"
        echo
    fi

    # Results
    echo -e "Detected samba package is '$BOLD$installed_samba$RESET'."

    if (( mitigation_applied )); then
        echo -e "${GREEN}You have mitigation applied${RESET} and vulnerability is not exploitable."
        exit 0
    else
        echo -e "${RED}Mitigation is not applied and the vulnerability is exploitable.${RESET}"
        echo -e "Follow https://access.redhat.com/security/vulnerabilities/smbloris for advice how to apply the mitigation."
        echo -e "${YELLOW}Follow the advice on service restart!${RESET}"
        exit 2
    fi
fi
