#!/bin/bash

# Copyright (c) 2017  Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Version: 1.0

# Warning! Be sure to download the latest version of this script from its primary source:
# https://access.redhat.com/security/vulnerabilities/3253921
# DO NOT blindly trust any internet sources and NEVER do `curl something | bash`!

# This script is meant for simple detection of the vulnerability. Feel free to modify it for your
# environment or needs. For more advanced detection, consider Red Hat Insights:
# https://access.redhat.com/products/red-hat-insights#getstarted

# Checking against the list of vulnerable packages is necessary because of the way how features
# are back-ported to older versions of packages in various channels.

VULNERABLE_KERNELS=(
    '4.11.0-44.el7'
    '4.11.0-22.el7'
    '4.11.0-28.el7'
    '4.11.0-30.el7'
    '4.11.0-32.el7'
    '4.11.0-34.el7'
    '4.11.0-37.el7'
    '4.11.0-39.el7'
    '4.11.0-42.el7'
    '4.11.0-44.2.1.el7'
    '4.11.0-44.el7'
    '4.11.0-10.el7'
    '4.11.0-12.el7'
    '4.11.0-13.el7'
    '4.11.0-14.el7'
    '4.11.0-15.el7'
    '4.11.0-16.el7'
    '4.11.0-17.el7'
    '4.11.0-18.el7'
    '4.11.0-19.el7'
    '4.11.0-20.el7'
    '4.11.0-21.el7'
    '4.11.0-22.el7'
    '4.11.0-23.el7'
    '4.11.0-24.el7'
    '4.11.0-25.el7'
    '4.11.0-26.el7'
    '4.11.0-27.el7'
    '4.11.0-28.el7'
    '4.11.0-29.el7'
    '4.11.0-30.el7'
    '4.11.0-31.el7'
    '4.11.0-32.el7'
    '4.11.0-33.el7'
    '4.11.0-34.el7'
    '4.11.0-35.el7'
    '4.11.0-36.el7'
    '4.11.0-37.el7'
    '4.11.0-38.el7'
    '4.11.0-39.el7'
    '4.11.0-40.el7'
    '4.11.0-41.el7'
    '4.11.0-42.el7'
    '4.11.0-43.el7'
    '4.11.0-44.1.1.el7'
    '4.11.0-44.2.1.el7'
    '4.11.0-44.el7'
    '4.14.0-0.rc1.1.el7'
    '4.14.0-0.rc3.1.el7'
    '4.14.0-0.rc4.1.el7'
    '4.14.0-0.rc5.1.el7'
    '4.14.0-0.rc6.1.el7'
    '4.14.0-0.rc7.1.el7'
    '4.14.0-0.rc7.2.el7'
    '4.14.0-0.rc7.3.el7'
    '4.14.0-0.rc8.1.el7'
    '4.14.0-0.rc8.2.el7'
    '4.14.0-1.el7'
    '4.14.0-2.el7'
    '4.14.0-3.el7'
    '4.14.0-4.el7'
    '4.14.0-5.el7'
    '4.14.0-6.el7'
    '4.14.0-7.el7'
)

KPATCH_MODULE_NAMES=(
    # Example: "kpatch_3_10_0_327_36_1_1_1"
)


basic_args() {
    # Parses basic commandline arguments and sets basic environment.
    #
    # Args:
    #     parameters - an array of commandline arguments
    #
    # Side effects:
    #     Exits if --help parameters is used
    #     Sets COLOR constants and debug variable

    local parameters=( "$@" )

    RED="\033[1;31m"
    YELLOW="\033[1;33m"
    GREEN="\033[1;32m"
    BOLD="\033[1m"
    RESET="\033[0m"
    for parameter in "${parameters[@]}"; do
        if [[ "$parameter" == "-h" || "$parameter" == "--help" ]]; then
            echo "Usage: $( basename "$0" ) [-n | --no-colors] [-d | --debug]"
            exit 1
        elif [[ "$parameter" == "-n" || "$parameter" == "--no-colors" ]]; then
            RED=""
            YELLOW=""
            GREEN=""
            BOLD=""
            RESET=""
        elif [[ "$parameter" == "-d" || "$parameter" == "--debug" ]]; then
            debug=true
        fi
    done
}


basic_reqs() {
    # Prints common disclaimer and checks basic requirements.
    #
    # Args:
    #     CVE - string printed in the disclaimer
    #
    # Side effects:
    #     Exits when 'rpm' command is not available

    local CVE="$1"

    # Disclaimer
    echo
    echo -e "${BOLD}This script is primarily designed to detect $CVE on supported"
    echo -e "Red Hat Enterprise Linux systems and kernel packages."
    echo -e "Result may be inaccurate for other RPM based systems.${RESET}"
    echo

    # RPM is required
    if ! command -v rpm &> /dev/null; then
        echo "'rpm' command is required, but not installed. Exiting."
        exit 1
    fi
}


check_supported_kernel() {
    # Checks if running kernel is supported.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #
    # Side effects:
    #     Exits when running kernel is obviously not supported

    local running_kernel="$1"

    # Check supported platform
    if [[ "$running_kernel" != *".el"[5-7]* ]]; then
        echo -e "${RED}This script is meant to be used only on Red Hat Enterprise"
        echo -e "Linux 5, 6 and 7.${RESET}"
        exit 1
    fi
}


get_rhel() {
    # Gets RHEL number.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #
    # Prints:
    #     RHEL number, e.g. '5', '6', or '7'

    local running_kernel="$1"
    local rhel

    rhel=$( sed -r -n 's/^.*el([[:digit:]]).*$/\1/p' <<< "$running_kernel" )
    echo "$rhel"
}


check_kernel() {
    # Checks kernel if it is in list of vulnerable kernels.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #     vulnerable_versions - an array of vulnerable versions
    #
    # Prints:
    #     Vulnerable kernel string as returned by 'uname -r', or nothing

    local running_kernel="$1"
    shift
    local vulnerable_versions=( "$@" )

    for tested_kernel in "${vulnerable_versions[@]}"; do
        if [[ "$running_kernel" == *"$tested_kernel"* ]]; then
            echo "$running_kernel"
            break
        fi
    done
}


check_kpatch() {
    # Checks if specific kpatch listed in a kpatch list is applied.
    #
    # Args:
    #     kpatch_module_names - an array of kpatches
    #
    # Prints:
    #     Found kpatch, or nothing

    local kpatch_module_names=( "$@" )
    local modules

    # Get loaded kernel modules
    modules=$( lsmod )

    # Check if kpatch is installed
    for tested_kpatch in "${kpatch_module_names[@]}"; do
        if [[ "$modules" == *"$tested_kpatch"* ]]; then
            echo "$tested_kpatch"
            break
        fi
    done
}


check_transparent_hugepages() {
    # Checks if transparent hugepages are enabled on the system.
    #
    # Prints:
    #     Transparent hugepage enabled setting, e.g. [always] madvise never => always.
    #     If file does not exist, does not print anything.

    local thp_enabled_path=${MOCK_THP_ENABLED_PATH:-/sys/kernel/mm/transparent_hugepage/enabled}
    if [[ -f "$thp_enabled_path" ]]; then
        sed -r -n 's/^.*\[(.*)\].*$/\1/p' "$thp_enabled_path"
    fi
}


check_zero_page() {
    # Checks if the zero page is prevented from being mapped as a huge page.
    #
    # Prints:
    #     Transparent hugepage use_zero_page setting, i.e. 0 | 1.
    #     If file does not exist, does not print anything.

    local thp_zero_path=${MOCK_THP_ZERO_PATH:-/sys/kernel/mm/transparent_hugepage/use_zero_page}
    if [[ -f "$thp_zero_path" ]]; then
        cat "$thp_zero_path"
    fi
}


if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    basic_args "$@"
    basic_reqs "CVE-2017-1000405"
    running_kernel=$( uname -r )
    check_supported_kernel "$running_kernel"

    rhel=$( get_rhel "$running_kernel" )
    if [[ "$rhel" == "5" ]]; then
        export PATH='/sbin':$PATH
    fi

    # Basic checks
    vulnerable_kernel=$( check_kernel "$running_kernel" "${VULNERABLE_KERNELS[@]}" )
    applied_kpatch=$( check_kpatch "${KPATCH_MODULE_NAMES[@]}" )

    # Specific checks
    transparent_hugepages=$( check_transparent_hugepages )
    use_zero_page=$( check_zero_page )

    # Debug prints
    if [[ "$debug" ]]; then
        echo "running_kernel = *$running_kernel*"
        echo "rhel = *$rhel*"
        echo "vulnerable_kernel = *$vulnerable_kernel*"
        echo "applied_kpatch = *$applied_kpatch*"
        echo "transparent_hugepages = *$transparent_hugepages*"
        echo "use_zero_page = *$use_zero_page*"
        echo
    fi

    # Results
    echo -e "Detected kernel package is '${BOLD}${running_kernel}${RESET}'."
    echo -e "Transparent hugepages are set to '${BOLD}${transparent_hugepages}${RESET}'."
    echo -e "Use zero page setting is set to '${BOLD}${use_zero_page}${RESET}'."

    if [[ "$vulnerable_kernel" ]]; then
        if [[ "$applied_kpatch" ]]; then
            echo -e "${YELLOW}This kernel version is vulnerable.${RESET}"
            echo -e "${GREEN}You have correct kpatch installed${RESET} and the kernel vulnerability"
            echo -e "is not exploitable."
            exit 0
        fi
        if [[ "$transparent_hugepages" == "never" ]]; then
            echo -e "${YELLOW}This kernel version is vulnerable.${RESET}"
            echo -e "${GREEN}You have transparent hugepages disabled${RESET} and the kernel vulnerability"
            echo -e "is not exploitable."
            exit 0
        fi
        if [[ "$use_zero_page" == "0" ]]; then
            echo -e "${YELLOW}This kernel version is vulnerable.${RESET}"
            echo -e "${GREEN}The zero page is prevented from being mapped as a huge page${RESET} and"
            echo -e "the kernel vulnerability is not exploitable."
            exit 0
        fi
        echo -e "${RED}This kernel version is vulnerable.${RESET}"
        echo -e "Either update kernel package (if possible) or apply mitigation."
        echo -e "Follow https://access.redhat.com/security/vulnerabilities/3253921 for advice."
        exit 2
    else
        echo -e "${GREEN}This kernel version is not vulnerable.${RESET}"
        exit 0
    fi
fi
