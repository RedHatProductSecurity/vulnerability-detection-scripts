#!/bin/bash

# Copyright (c) 2017  Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Version: 1.0

# Warning! Be sure to download the latest version of this script from its primary source:
# https://access.redhat.com/labs/poodle/
#   or
# https://access.redhat.com/articles/1232123
# DO NOT blindly trust any internet sources and NEVER do `curl something | bash`!

# This script is meant for simple detection of the vulnerability. Feel free to modify it for your
# environment or needs. For more advanced detection, consider Red Hat Insights:
# https://access.redhat.com/products/red-hat-insights#getstarted

# Checking against the list of vulnerable packages is necessary because of the way how features
# are back-ported to older versions of packages in various channels.


basic_args() {
    # Parses basic commandline arguments and sets basic environment.
    #
    # Args:
    #     parameters - an array of commandline arguments
    #
    # Side effects:
    #     Exits if --help parameters is used
    #     Sets COLOR constants and debug variable

    local parameters=( "$@" )

    RED="\033[1;31m"
    YELLOW="\033[1;33m"
    GREEN="\033[1;32m"
    BOLD="\033[1m"
    RESET="\033[0m"
    for parameter in "${parameters[@]}"; do
        if [[ "$parameter" == "-h" || "$parameter" == "--help" ]]; then
            echo "Usage: $( basename "$0" ) [-n | --no-colors] [-d | --debug]"
            exit 1
        elif [[ "$parameter" == "-n" || "$parameter" == "--no-colors" ]]; then
            RED=""
            YELLOW=""
            GREEN=""
            BOLD=""
            RESET=""
        elif [[ "$parameter" == "-d" || "$parameter" == "--debug" ]]; then
            debug=true
        fi
    done
}


basic_reqs() {
    # Prints common disclaimer and checks basic requirements.
    #
    # Args:
    #     CVE - string printed in the disclaimer
    #
    # Side effects:
    #     Exits when 'rpm' command is not available

    local CVE="$1"

    # Disclaimer
    echo
    echo -e "${BOLD}This script is primarily designed to detect $CVE on supported"
    echo -e "Red Hat Enterprise Linux systems and kernel packages."
    echo -e "Result may be inaccurate for other RPM based systems.${RESET}"
    echo

    # RPM is required
    if ! command -v rpm &> /dev/null; then
        echo "'rpm' command is required, but not installed. Exiting."
        exit 1
    fi
}


check_supported_kernel() {
    # Checks if running kernel is supported.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #
    # Side effects:
    #     Exits when running kernel is obviously not supported

    local running_kernel="$1"

    # Check supported platform
    if [[ "$running_kernel" != *".el"[5-7]* ]]; then
        echo -e "${RED}This script is meant to be used only on Red Hat Enterprise"
        echo -e "Linux 5, 6 and 7.${RESET}"
        exit 1
    fi
}


get_rhel() {
    # Gets RHEL number.
    #
    # Args:
    #     running_kernel - kernel string as returned by 'uname -r'
    #
    # Prints:
    #     RHEL number, e.g. '5', '6', or '7'

    local running_kernel="$1"

    local rhel
    rhel=$( sed -r -n 's/^.*el([[:digit:]]).*$/\1/p' <<< "$running_kernel" )
    echo "$rhel"
}


get_installed_packages() {
    # Checks for installed packages of a 'package_name'. Compatible with RHEL5.
    #
    # Args:
    #     package_name - package name string
    #
    # Prints:
    #     Lines with N-V-R.A strings of all installed packages.

    local package_name="$1"

    rpm -qa --queryformat="%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n" "$package_name"
}


read_array() {
    # Reads lines from stdin and saves them in a global array referenced by a name.
    # It is a poor man's readarray compatible with Bash 3.1.
    #
    # Args:
    #     array_name - name of the global array
    #
    # Side effects:
    #     Overwrites content of the array 'array_name' with lines from stdin

    local i=0
    while IFS= read -r line; do
        read -r "${1}[$(( i++ ))]" <<< "$line"
    done
}


check_httpd_configs() {
    # Searches httpd config files for usage of SSLv3.
    #
    # Prints:
    #     Lines which contain vulnerable configurations.
    #
    # Returns:
    #     0 when vulnerable configurations were found, 1 otherwise.
    #
    # Notes:
    #     MOCK_HTTPD_CONFIGS_PATH can be used to mock /etc/httpd directory

    local httpd_configs=${MOCK_HTTPD_CONFIGS_PATH:-/etc/httpd}

    local MINUS_ALL='^[^#]*\-all'
    local PLUS_SSLV3='^[^#]*\+sslv3'
    local MINUS_SSLV3='^[^#]*\-sslv3'
    local ALL='^[^#]*all'
    local SSLV3='^[^#]*sslv3'

    ssl_protocol=$( grep -E -R -s -i '^[[:space:]]*SSLProtocol' "$httpd_configs/conf/httpd.conf" "$httpd_configs/conf.d" )
    nss_protocol=$( grep -E -R -s -i '^[[:space:]]*NSSProtocol' "$httpd_configs/conf/httpd.conf" "$httpd_configs/conf.d" )
    ssl_protocol_lines=()
    nss_protocol_lines=()

    if [[ "$ssl_protocol" ]]; then
        read_array ssl_protocol_lines <<< "$ssl_protocol"
    fi
    if [[ "$nss_protocol" ]]; then
        read_array nss_protocol_lines <<< "$nss_protocol"
    fi

    vulnerable_protocol_lines=()
    for line in "${ssl_protocol_lines[@]}"; do
        line_lower=$( tr "[:upper:]" "[:lower:]" <<< "$line" )
        if [[ ( "$line_lower" =~ $MINUS_ALL && "$line_lower" =~ $PLUS_SSLV3 ) || \
              ( ! "$line_lower" =~ $MINUS_ALL && ! "$line_lower" =~ $MINUS_SSLV3 ) ]]; then
            vulnerable_protocol_lines+=("$line")
        fi
    done
    for line in "${nss_protocol_lines[@]}"; do
        line_lower=$( tr "[:upper:]" "[:lower:]" <<< "$line" )
        if [[ "$line_lower" =~ $ALL || "$line_lower" =~ $SSLV3 ]]; then
            vulnerable_protocol_lines+=("$line")
        fi
    done

    if (( ${#vulnerable_protocol_lines[@]} > 0 )); then
        for line in "${vulnerable_protocol_lines[@]}"; do
            echo "$line"
        done
        return 0  # Found vulnerable config lines
    else
        return 1
    fi
}


check_vsftpd_config() {
    # Searches vsftp config files for usage of SSLv3.
    #
    # Prints:
    #     Lines which contain vulnerable configurations.
    #
    # Returns:
    #     0 when vulnerable configurations were found, 1 otherwise.
    #
    # Notes:
    #     MOCK_VSFTP_CONFIG_PATH can be used to mock /etc/vsftpd/vsftpd.conf file

    local vsftpd_config=${MOCK_VSFTP_CONFIG_PATH:-/etc/vsftpd/vsftpd.conf}

    ssl_enable=$( grep -E -R -s -i '^[[:space:]]*ssl_enable[[:space:]]*=[[:space:]]*(yes|true|1)' "$vsftpd_config" )
    ssl_sslv3=$( grep -E -R -s -i '^[[:space:]]*ssl_sslv3[[:space:]]*=[[:space:]]*(yes|true|1)' "$vsftpd_config" )

    if [[ "$ssl_enable" && "$ssl_sslv3" ]]; then
        echo "$vsftpd_config:$ssl_enable"
        echo "$vsftpd_config:$ssl_sslv3"
        return 0  # Found vulnerable config lines
    else
        return 1
    fi
}


check_access() {
    # Checks if main httpd config and vsftpd config are readable if said software
    # is installed.
    #
    # Side effects:
    #     Exits when cannot read necessary config files
    #
    # Notes:
    #     MOCK_HTTPD_CONFIGS_PATH can be used to mock /etc/httpd directory
    #     MOCK_VSFTP_CONFIG_PATH can be used to mock /etc/vsftpd/vsftpd.conf file

    httpd_packages="$1"
    vsftpd_packages="$2"

    local httpd_configs=${MOCK_HTTPD_CONFIGS_PATH:-/etc/httpd}
    local vsftpd_config=${MOCK_VSFTP_CONFIG_PATH:-/etc/vsftpd/vsftpd.conf}

    if [[ "$httpd_packages" ]]; then
        if [[ ! -r "$httpd_configs/conf/httpd.conf" ]]; then
            echo -e "${RED}Cannot read '$httpd_configs/conf/httpd.conf', make sure you have permissions.${RESET}"
            exit 1
        fi
    fi
    if [[ "$vsftpd_packages" ]]; then
        if [[ ! -r "$vsftpd_config" ]]; then
            echo -e "${RED}Cannot read '$vsftpd_config', make sure you have permissions.${RESET}"
            exit 1
        fi
    fi
}


if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    basic_args "$@"
    basic_reqs "CVE-2014-3566"
    running_kernel=$( uname -r )
    check_supported_kernel "$running_kernel"

    echo "This script checks configuration of vsftpd and httpd. Other software may be vulnerable."
    echo "See https://access.redhat.com/articles/1232123 for more information."
    echo

    rhel=$( get_rhel "$running_kernel" )
    if [[ "$rhel" == "5" ]]; then
        export PATH='/sbin':$PATH
    fi

    # Check installed httpd and vsftpd
    httpd_packages=$( get_installed_packages "httpd" )
    vsftpd_packages=$( get_installed_packages "vsftpd" )
    if [[ ! "$httpd_packages" && ! "$vsftpd_packages" ]]; then
        echo -e "${GREEN}Neither 'httpd' nor 'vsftpd' is not installed.${RESET}"
        exit 0
    fi

    # Check access to the config files
    check_access "$httpd_packages" "$vsftpd_packages"

    # Specific checks
    httpd_vulnerable_lines=$( check_httpd_configs )
    # Store result as a flag, 1 as True, 0 as False
    # shellcheck disable=SC2181
    httpd_vulnerable=$(( !$? ))

    vsftpd_vulnerable_lines=$( check_vsftpd_config )
    # Store result as a flag, 1 as True, 0 as False
    # shellcheck disable=SC2181
    vsftpd_vulnerable=$(( !$? ))

    # Debug prints
    if [[ "$debug" ]]; then
        echo "httpd_packages = *$httpd_packages*"
        echo "vsftpd_packages = *$vsftpd_packages*"
        echo "httpd_vulnerable_lines = *$httpd_vulnerable_lines*"
        echo "httpd_vulnerable = *$httpd_vulnerable*"
        echo "vsftpd_vulnerable_lines = *$vsftpd_vulnerable_lines*"
        echo "vsftpd_vulnerable = *$vsftpd_vulnerable*"
        echo
    fi

    # Results
    if [[ "$httpd_packages" ]]; then
        echo -e "Detected 'httpd' packages are:"
        echo -e "${BOLD}$httpd_packages${RESET}"
    fi

    if [[ "$vsftpd_packages" ]]; then
        echo -e "Detected 'vsftpd' packages are:"
        echo -e "${BOLD}$vsftpd_packages${RESET}"
    fi

    if (( httpd_vulnerable || vsftpd_vulnerable )); then
        result=0
        if [[ "$httpd_packages" ]]; then
            if (( httpd_vulnerable )); then
                echo -e "${RED}'httpd' configuration is vulnerable.${RESET}"
                echo "Lines in 'httpd' configuration which enable SSLv3 which is vulnerable are:"
                echo -e "${YELLOW}$httpd_vulnerable_lines${RESET}"
                (( result |= 2 ))
            fi
        fi
        if [[ "$vsftpd_packages" ]]; then
            if (( vsftpd_vulnerable )); then
                echo -e "${RED}'vsftpd' configuration is vulnerable.${RESET}"
                echo "Lines in 'vsftpd' configuration which enable SSLv3 which is vulnerable are:"
                echo -e "${YELLOW}$vsftpd_vulnerable_lines${RESET}"
                (( result |= 4 ))
            fi
        fi
        exit "$result"
    else
        echo -e "${GREEN}Vulnerable configuration was not found.${RESET}"
        exit 0
    fi
fi
